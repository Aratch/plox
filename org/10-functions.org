#+title: 10 Functions


* 10.1 Function calls

There's more to function calls than meets the eye.

*Anything* can be a /callee/, as long as it evaluates to a function. As in:

#+begin_src c
getCallback()();
#+end_src

Function calls, being expressions, have to have higher precedence (i.e. lower on the ladder), just below =primary=:

#+begin_src bnf
unary -> ( "!" | "-" ) unary | call ;
call  -> primary ( "(" arguments? ")" )* ;

arguments -> expression ( "," expression )* ;
#+end_src

To paraphrase the book: The =call= rule describes bare primary expressions (i.e. no parentheses after the primary expression) and/or call chains with a call depth of one or more.

* 10.3 Function declarations

The =declaration= rule looked like this previously:

#+begin_src bnf
declaration -> varDecl
            | statement ;
#+end_src

We're adding a new production like so:

#+begin_src bnf
declaration -> funDecl
            |  varDecl
            |  statement ;

funDecl     -> "fun" function ;
function    -> IDENTIFIER "(" parameters? ")" block ;
#+end_src

=parameters= looks deceptively like =arguments=, but =parameters= only has =IDENTIFIER= elements:
#+begin_src bnf
parameters  -> IDENTIFIER ( "," IDENTIFIER )* ;
#+end_src

* 10.5 Return Statements

#+begin_src bnf
statement  -> exprStmt
           | forStmt
           | ifStmt
           | printStmt
           | returnStmt
           | whileStmt
           | block ;

returnStmt -> "return" expression? ";" ;

#+end_src

* Challenges

** Lambda functions
*** Problem Description
#+begin_quote
Lox’s function declaration syntax performs two independent operations. It creates a function and also binds it to a name. This improves usability for the common case where you do want to associate a name with the function. But in functional-styled code, you often want to create a function to immediately pass it to some other function or return it. In that case, it doesn’t need a name.

Languages that encourage a functional style usually support anonymous functions or lambdas—an expression syntax that creates a function without binding it to a name. Add anonymous function syntax to Lox so that this works:
#+end_quote

#+begin_src
fun thrice(fn) {
  for (var i = 1; i <= 3; i = i + 1) {
    fn(i);
  }
}

thrice(fun (a) {
  print a;
});
// "1".
// "2".
// "3".
#+end_src

#+begin_quote
How do you handle the tricky case of an anonymous function expression occurring in an expression statement:
#+end_quote

#+begin_src
fun () {};
#+end_src
*** Relevant Grammar
In order to address the first half of the problem, here's the relevant bits and pieces of grammar:

#+begin_src bnf
program     -> declaration* EOF ;

[...]

unary -> ( "!" | "-" ) unary | call ;
call  -> primary ( "(" arguments? ")" )* ;

arguments -> expression ( "," expression )* ;

[...]


[...]

returnStmt -> "return" expression? ";" ;

declaration -> funDecl
            |  varDecl
            |  statement ;

statement  -> exprStmt
           | forStmt
           | ifStmt
           | printStmt
           | returnStmt
           | whileStmt
           | block ;

[...]

varDecl     -> "var" IDENTIFIER ( "=" expression )? ";" ;
funDecl     -> "fun" function ;
function    -> IDENTIFIER "(" parameters? ")" block ;


parameters  -> IDENTIFIER ( "," IDENTIFIER )* ;
#+end_src

Function definitions are *declarative statements*. They do not return a value (e.g. a function object).

In terms of interpreter semantics, they already create and bind a function to a name that can be returned. Anonymous functions may, too, be bound -- which is already possible. Functions are already defined within a closure and encapsulate a closure themselves, which are all prerequisites for lambda functionality.

The question is: Do we generalise function definitions as containing a "fun" expression or do we keep those separately?

**** Separate
#+begin_src bnf
// Function declaration *statement*
funDecl       -> "fun" function ;
function      -> IDENTIFIER "(" parameters? ")" block ;
parameters    -> IDENTIFIER ( "," IDENTIFIER )* ;

// Lambda function *expression*
// i.e. parse this: "fun (param1, param2) { stuff(); }"
lambda        -> "fun" "(" parameters? ")" block ;
// this rule has to be slot underneath (i.e. with higher precedence) call, because
// the lambda function has to be parsed and executed first before being called

primary       -> NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER
               | lambda ;
#+end_src

We can basically reuse the existing =Function < Stmt= class but have it inherit from =Expr= instead?
#+begin_src python
@dataclass
class Lambda(Expr):
    token: Token # the 'fun' token, so we can have fun error messages
    params: list[Token]
    body: list[Stmt]
#+end_src

Note: If we wanted to mirror, say, the Python approach we'd have to require the body be a single expression (i.e. exactly like Python), contain expressions only (for a functional-only approach) or require the block end with an expression.

A lambda expression like this would to have to be immediately bound to a variable name, still -- or be executed/evaluated immediately.

Either way, the interpreter wouldn't need to know the exact difference, just the scoping is different.

**** Combined/Javascript approach?
If we go the combined way, we can define anonymous functions and immediately call them in a statement (like in JS).

Make "normal" function declarations functionally equivalent to:
#+begin_src
var f = fun (a) { print a; };
#+end_src

The *big* difference is that a =funDecl= *statement* doesn't end in ";":
#+begin_src
fun f (a)
{
  print a;
}
#+end_src

...you know what, instead of any mental gymnastics involving shoving some kind of extra syntactical distinction, just make the =funDecl= and =function= rules evaluate into an =Expr= where the =IDENTIFIER= after =fun= is optional.

#+begin_src bnf
funDecl       -> "fun" function ;
function      -> IDENTIFIER? "(" parameters? ")" block ;
parameters    -> IDENTIFIER ( "," IDENTIFIER )* ;
#+end_src

So that =primary= can cascade into a function expression.
#+begin_src bnf
primary       -> NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER
               | ??? ;
#+end_src

...nononono, wait...
#+begin_src bnf
funDecl       -> funExpr ;
[...]
funExpr       -> IDENTIFIER? "(" parameters? ")" block ;

primary       -> NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER
               | funExpr ;
#+end_src

This is fugly.
*** Going down the path of least resistance
Go the the 'separate' route and disallow lambda functions in statements (as is the case now, basically) so as to not touch the existing function declaration code.
#+begin_src bnf
// Lambda function *expression*
// i.e. parse this: "fun (param1, param2) { stuff(); }"
lambda        -> "fun" "(" parameters? ")" block ;
// this rule has to be slot underneath (i.e. with higher precedence) call, because
// the lambda function has to be parsed and executed first before being called

primary       -> NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER
               | lambda ;
#+end_src

With this =Expr= subclass:
#+begin_src python
@dataclass
class Lambda(Expr):
    token: Token # the 'fun' token, so we can have fun error messages
    params: list[Token]
    body: list[Stmt]
#+end_src
Change =generate_ast.py=:
#+begin_src python

    define_ast(output_dir, "Expr", [
        "Assign   : Token name, Expr value",
        "Binary   : Expr left, Token operator, Expr right",
        "Call     : Expr callee, Token paren, list[Expr] arguments",
        "Grouping : Expr expression",
        "Literal  : object value",
        "Logical  : Expr left, Token operator, Expr right",
        "Unary    : Token operator, Expr right",
        "Ternary  : Token operator, Expr condition, Expr left, Expr right",
        "Variable : Token name",
        "Lambda   : Token token, list[Token] params, 'list[Stmt]' body"
    ])
    # see https://stackoverflow.com/a/59169236 for the string literal annotation above
#+end_src

Add this to =Parser.primary()=:
#+begin_src python
    def primary(self) -> Expr:
        # ...
        if self.match(IDENTIFIER):
            return Variable(self.previous())
        # After this

        if self.check(FUN):
            return self.lambda_expression()

        if self.match(LEFT_PAREN):
            expr : Expr = self.expression()
            self.consume(RIGHT_PAREN, "Expected ')' after expression.")
            return Grouping(expr)
#+end_src

Add =Parser.lambda_expression()= method that mirrors =Parser.function()=:
#+begin_src python
    def lambda_expression(self) -> Expr:
        token: Token = self.advance() # we already know this is "fun"
        self.consume(LEFT_PAREN, f"Expected '(' after 'fun' for lambda function.")

        parameters: list[Token] = []

        if not self.check(RIGHT_PAREN):
            parameters.append(self.consume(IDENTIFIER, "Expected parameter name."))
            while self.match(COMMA):
                if len(parameters) >= 255:
                    error(self.peek(), "Can't have more than 255 parameters.")
                parameters.append(self.consume(IDENTIFIER, "Expected parameter name."))

        self.consume(RIGHT_PAREN, "Expected ')' after parameters.")

        self.consume(LEFT_BRACE, f"Expected '{{' before lambda body.")
        body: list[Stmt] = self.block()

        return Lambda(token, parameters, body)
#+end_src

Add =Lambda= =visit= method to interpreter which *returns* a PloxCallable subclass:

#+begin_src python
    @visitor(Lambda)
    def visit(self, expr: Lambda):
        function: PloxLambda = PloxLambda(expr, self.environment)
        return function
#+end_src

Going down the same "don't touch anything else" route:

#+begin_src python

class PloxLambda(PloxCallable):
    def __init__(self, declaration: Lambda, closure: Environment):
        self.declaration = declaration
        self.closure = closure

    def arity(self) -> int:
        return len(self.declaration.params)

    def __str__(self) -> str:
        return f"<fn lambda>"

    def call(self, interpreter, arguments: list) -> Any:
        environment = Environment(self.closure)

        for i, param in enumerate(self.declaration.params):
            environment.define(param.lexeme, arguments[i])

        try:
            interpreter.execute_block(self.declaration.body, environment)
        except PloxReturnException as return_exception:
            return return_exception.value

        return None
#+end_src
