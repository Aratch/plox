# -*- mode: org -*-
#+TITLE: Lox Grammar

* (5.1.3) Grammar for Lox expressions
#+begin_src bnf
expression -> literal
            | unary
            | binary
            | grouping ;

literal    -> NUMBER | STRING | "true" | "false" | "nil" ;
grouping   -> "(" expression ")" ;
unary      -> ( "-" | "!" ) expression ;
binary     -> expression operator expression ;
operator   -> "==" | "!=" | "<" | "<=" | ">" | ">="
            | "+" | "-" | "*" | "/" ;
#+end_src

This is, however, *ambiguous* (see 6.1).

* (6.1) Unambiguous Grammar
#+begin_src bnf
expression -> equality ;
equality   -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       -> factor ( ( "-" | "+" ) factor )* ;
factor     -> unary ( ( "/" | "*" ) unary )* ;
unary      -> ( "!" | "-" ) unary
            | primary ;
primary    -> NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")" ;
#+end_src
* 6.4 Challenges
*** DONE C style comma (sequential evaluation operator)
#+begin_quote
In C, a block is a statement form that allows you to pack a series of statements where a single one is expected. The comma operator is an analogous syntax for expressions. A comma-separated series of expressions can be given where a single expression is expected (except inside a function callâ€™s argument list). At runtime, the comma operator evaluates the left operand and discards the result. Then it evaluates and returns the right operand.

Add support for comma expressions. Give them the same precedence and associativity as in C. Write the grammar, and then implement the necessary parsing code.
#+end_quote


**** C grammar excerpt
:sources:
https://cs.wmich.edu/~gupta/teaching/cs4850/sumII06/The%20syntax%20of%20C%20in%20Backus-Naur%20form.htm

https://gist.github.com/arslancharyev31/c48d18d8f917ffe217a0e23eb3535957
:END:
#+begin_src bnf
primary-expression ::= identifier
                       | constant
                       | string
                       | '(' expression ')'

expression ::= assignment-expression
               | expression ',' assignment-expression

postfix-expression ::= primary-expression
                       | postfix-expression '[' expression ']'
                       | postfix-expression '(' {assignment-expression}* ')'
                       | postfix-expression '.' identifier
                       | postfix-expression '->' identifier
                       | postfix-expression '++'
                       | postfix-expression '--'

unary-expression ::= postfix-expression
                     | '++' unary-expression
                     | '--' unary-expression
                     | unary-operator cast-expression
                     | sizeof unary-expression
                     | sizeof type-name

cast-expression ::= unary-expression
                    | '(' type-name ')' cast-expression

additive-expression ::= multiplicative-expression
                        | additive-expression '+' multiplicative-expression
                        | additive-expression '-' multiplicative-expression

multiplicative-expression ::= cast-expression
                              | multiplicative-expression '*' cast-expression
                              | multiplicative-expression '/' cast-expression

assignment-expression ::= conditional-expression
                          | unary-expression assignment-operator assignment-expression

conditional-expression ::= logical-or-expression
                           | logical-or-expression '?' expression ':' conditional-expression
#+end_src
**** C operator precedence table (excerpt)
https://en.cppreference.com/w/c/language/operator_precedence

1. ++/-- (suffix *crement)
2. ++/-- (prefix *crement)
   +/-   (unary plus and minus)
   ! ~   (unary logical NOT and bitwise NOT)
3. * / % (mult, div, modulo)
4. +/-   (add, subtr)
...
6. < <= > >=
7. == !=
..
13. ?:   (ternary conditional)
14. =    (assignment)
15. ,    (sequential comma)


**** Relevant changes
In C, an expression is basically defined as
#+begin_src bnf
expression -> assignment-expression
            | expression "," assignment-expression ;
#+end_src

So we simply extend our definition of an expression:
#+begin_src bnf
expression -> equality
            | expression "," expression ;
#+end_src

This means that
#+begin_src python
    def expression(self) -> Expr:
        return self.equality()
#+end_src

needs to accomodate the case of a binary "," operator, as in
#+begin_src python
    def equality(self) -> Expr:
        expr : Expr = self.comparison()

        while self.match(BANG_EQUAL, EQUAL_EQUAL):
            operator : Token = self.previous()
            right: Expr = self.comparison()
            expr = Binary(expr, operator, right)

        return expr
#+end_src

*Caveats*:
- The , operator has the lowest precedence (is evaluated last, i.e. all sub-expressions are evaluated first)
        -> this is already the case

- The , operator has left-to-right associativity (i.e. the left side is evaluated first, duh)
        -> This might not be correct yet

My current grammar rule is *left-recursive*. This is DANGEROUS.

How about this, then:
#+begin_src bnf
expression -> sequence ;
sequence   -> equality ( "," equality )* ;
equality   -> comparison ( ( "!=" | "==" ) comparison )* ;
#+end_src

This yields
#+begin_src python
    def expression(self) -> Expr:
        return self.sequence()

    def sequence(self) -> Expr:
        expr : Expr = self.equality()

        while self.match(COMMA):
            operator : Token = self.previous()
            right : Expr = self.equality()
            expr = Binary(expr, operator, right)

        return expr
#+end_src

This seems *CORRECT*?

*** DONE C-style ternary '?:' operator
The lox grammar looks like this now:

#+begin_src bnf
expression -> sequence ;
sequence   -> equality ( "," equality )* ;
equality   -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       -> factor ( ( "-" | "+" ) factor )* ;
factor     -> unary ( ( "/" | "*" ) unary )* ;
unary      -> ( "!" | "-" ) unary
            | primary ;
primary    -> NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")" ;
#+end_src

In the C grammar, the "? :" operator is lodged here:
#+begin_src bnf
conditional-expression ::= logical-or-expression
                           | logical-or-expression '?' expression ':' conditional-expression
#+end_src

Where =logical-or-expression= may basically evaluate down to a primary expression or something in between.


In the lox grammar, this might look like this:
#+begin_src bnf
sequence -> ternary ( "," ternary )* ;
ternary -> equality ( "?" expression ":" ternary )* ;
#+end_src

This isn't left-recursive, but it's looking awfully... recursive.

This will require some changes in =generate_ast.py= to accomodate a ternary expression:
#+begin_src python
    define_ast(output_dir, "Expr", [
        "Binary   : Expr left, Token operator, Expr right",
        "Grouping : Expr expression",
        "Literal  : object value",
        "Unary    : Token operator, Expr right",
        "Ternary  : Expr left, Expr condition, Expr right"
    ])
#+end_src

Might just as well make the generator more data-driven and have it read something like:
#+begin_src
Binary   : Expr left, Token operator, Expr right
Grouping : Expr expression
Literal  : object value
Unary    : Token operator, Expr right
Ternary  : Expr left, Expr condition, Expr right
#+end_src

But that'd be too much work.

This would mean that code would change like this:

#+name: token.py
#+begin_src python

TokenType = Enum(...
                 # +++ Add this +++
                 QUESTION_MARK, COLON,
                 EOF""")
#+end_src
#+begin_src python

    def scan_token(self):
        c : Char = self.advance()
        match c:
            case '(': self.add_token(LEFT_PAREN)
            case ')': self.add_token(RIGHT_PAREN)
            case '}': self.add_token(LEFT_BRACE)
            case '{': self.add_token(RIGHT_BRACE)
            case ',': self.add_token(COMMA)
            case '.': self.add_token(DOT)
            case '-': self.add_token(MINUS)
            case '+': self.add_token(PLUS)
            case ';': self.add_token(SEMICOLON)
            case '*': self.add_token(STAR)
            # +++ ADD THIS +++
            case '?': self.add_token(QUESTION_MARK)
            case ':': self.add_token(COLON)
...
#+end_src
#+begin_src python
    def sequence(self) -> Expr:
        expr : Expr = self.ternary()

        while self.match(COMMA):
            operator : Token = self.previous()
            right : Expr = self.ternary()
            expr = Binary(expr, operator, right)

        return expr

    # XXX: Requires from plox.expr import Ternary
    def ternary(self) -> Expr:
        expr : Expr = self.equality()

        # If the next operator is a question mark
        while self.match(QUESTION_MARK):
            operator: Token = self.previous()
            condition : Expr = self.expression()
            if self.match(COLON):
                right : Expr = self.ternary()
                expr = Ternary(operator, expr, condition, right)
            else:
                raise self.error(self.peek(), "Expected colon in ternary expression.")
        return expr
#+end_src

I forgot that Ternary should maybe also include the operator for completeness' sake.

*CAVEAT*: I messed up the order of arguments. The correct ast object description would be
#+begin_src
        "Ternary  : Token operator, Expr condition, Expr left, Expr right"
#+end_src
So that constructing a Ternary object looks like this:
#+begin_src
            if self.match(COLON):
                right : Expr = self.ternary()
                expr = Ternary(operator, condition, right, right)
#+end_src

*** DONE Error production for binary ops with missing left-hand expression
#+begin_quote
Add error productions to handle each binary operator appearing without a left-hand operand. In other words, detect a binary operator appearing at the beginning of an expression. Report that as an error, but also parse and discard a right-hand operand with the appropriate precedence.
#+end_quote

As a reminder:

#+begin_src bnf
expression -> sequence ;
sequence -> ternary ( "," ternary )* ;
ternary -> equality ( "?" expression ":" ternary )* ;
equality   -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term       -> factor ( ( "-" | "+" ) factor )* ;
factor     -> unary ( ( "/" | "*" ) unary )* ;
unary      -> ( "!" | "-" ) unary
            | primary ;
primary    -> NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")" ;
#+end_src

One ad-hoc way to approach this is to add the check in =primary()= and bubble it up from there?

#+begin_src python
    def primary(self) -> Expr:
        # +
        binary_operators = set([COMMA, BANG_EQUAL, EQUAL_EQUAL,
                               GREATER, GREATER_EQUAL, LESS, LESS_EQUAL,
                               MINUS, PLUS,
                               SLASH, STAR])
        # +
        if self.match(FALSE):
            return Literal(False)
        if self.match(TRUE):
            return Literal(True)
        if self.match(NIL):
            return Literal(None)
        if self.match(NUMBER, STRING):
            return Literal(self.previous().literal)

        if self.match(LEFT_PAREN):
            expr : Expr = self.expression()
            self.consume(RIGHT_PAREN, "Expected ')' after expression.")
            return Grouping(expr)

        for op in binary_operators:
            if self.match(op):
                operator_token = self.previous()
                self.consume(A_BUNCH_OF_TOKEN_TYPES, "foo")
                # How do I consume the entire right-hand operand?!
                raise self.error(operator_token, f"Expected left-hand side of binary operator {operator_token.lexeme}.")

        raise self.error(self.peek(), "Expected expression.")
#+end_src

The way it's written, it'll only consume the operator and one token on the right of the operator. This won't do.

Could I call =self.expression()= again inside the error block?

#+begin_src python
                operator_token = self.peek()
                expr = self.expression() # will be discarded?
                raise self.error(operator_token, f"Expected left-hand side of binary operator {operator_token.lexeme}.")
#+end_src

This would loop through the entire parsing process again and might effectively discard the right-hand operand? I sure as hell don't know.

...it seems to be working, though. Do I need synchronisation? I dunno.
